/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SystemVersionResponseComponents;
import io.swagger.client.model.SystemVersionResponsePlatform;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SystemVersionResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-17T00:16:49.279+04:00")
public class SystemVersionResponse {
  @SerializedName("Platform")
  private SystemVersionResponsePlatform platform = null;

  @SerializedName("Components")
  private List<SystemVersionResponseComponents> components = null;

  @SerializedName("Version")
  private String version = null;

  @SerializedName("ApiVersion")
  private String apiVersion = null;

  @SerializedName("MinAPIVersion")
  private String minAPIVersion = null;

  @SerializedName("GitCommit")
  private String gitCommit = null;

  @SerializedName("GoVersion")
  private String goVersion = null;

  @SerializedName("Os")
  private String os = null;

  @SerializedName("Arch")
  private String arch = null;

  @SerializedName("KernelVersion")
  private String kernelVersion = null;

  @SerializedName("Experimental")
  private Boolean experimental = null;

  @SerializedName("BuildTime")
  private String buildTime = null;

  public SystemVersionResponse platform(SystemVersionResponsePlatform platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @ApiModelProperty(value = "")
  public SystemVersionResponsePlatform getPlatform() {
    return platform;
  }

  public void setPlatform(SystemVersionResponsePlatform platform) {
    this.platform = platform;
  }

  public SystemVersionResponse components(List<SystemVersionResponseComponents> components) {
    this.components = components;
    return this;
  }

  public SystemVersionResponse addComponentsItem(SystemVersionResponseComponents componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<SystemVersionResponseComponents>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Get components
   * @return components
  **/
  @ApiModelProperty(value = "")
  public List<SystemVersionResponseComponents> getComponents() {
    return components;
  }

  public void setComponents(List<SystemVersionResponseComponents> components) {
    this.components = components;
  }

  public SystemVersionResponse version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public SystemVersionResponse apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Get apiVersion
   * @return apiVersion
  **/
  @ApiModelProperty(value = "")
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public SystemVersionResponse minAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
    return this;
  }

   /**
   * Get minAPIVersion
   * @return minAPIVersion
  **/
  @ApiModelProperty(value = "")
  public String getMinAPIVersion() {
    return minAPIVersion;
  }

  public void setMinAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
  }

  public SystemVersionResponse gitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
    return this;
  }

   /**
   * Get gitCommit
   * @return gitCommit
  **/
  @ApiModelProperty(value = "")
  public String getGitCommit() {
    return gitCommit;
  }

  public void setGitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
  }

  public SystemVersionResponse goVersion(String goVersion) {
    this.goVersion = goVersion;
    return this;
  }

   /**
   * Get goVersion
   * @return goVersion
  **/
  @ApiModelProperty(value = "")
  public String getGoVersion() {
    return goVersion;
  }

  public void setGoVersion(String goVersion) {
    this.goVersion = goVersion;
  }

  public SystemVersionResponse os(String os) {
    this.os = os;
    return this;
  }

   /**
   * Get os
   * @return os
  **/
  @ApiModelProperty(value = "")
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }

  public SystemVersionResponse arch(String arch) {
    this.arch = arch;
    return this;
  }

   /**
   * Get arch
   * @return arch
  **/
  @ApiModelProperty(value = "")
  public String getArch() {
    return arch;
  }

  public void setArch(String arch) {
    this.arch = arch;
  }

  public SystemVersionResponse kernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

   /**
   * Get kernelVersion
   * @return kernelVersion
  **/
  @ApiModelProperty(value = "")
  public String getKernelVersion() {
    return kernelVersion;
  }

  public void setKernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
  }

  public SystemVersionResponse experimental(Boolean experimental) {
    this.experimental = experimental;
    return this;
  }

   /**
   * Get experimental
   * @return experimental
  **/
  @ApiModelProperty(value = "")
  public Boolean isExperimental() {
    return experimental;
  }

  public void setExperimental(Boolean experimental) {
    this.experimental = experimental;
  }

  public SystemVersionResponse buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

   /**
   * Get buildTime
   * @return buildTime
  **/
  @ApiModelProperty(value = "")
  public String getBuildTime() {
    return buildTime;
  }

  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemVersionResponse systemVersionResponse = (SystemVersionResponse) o;
    return Objects.equals(this.platform, systemVersionResponse.platform) &&
        Objects.equals(this.components, systemVersionResponse.components) &&
        Objects.equals(this.version, systemVersionResponse.version) &&
        Objects.equals(this.apiVersion, systemVersionResponse.apiVersion) &&
        Objects.equals(this.minAPIVersion, systemVersionResponse.minAPIVersion) &&
        Objects.equals(this.gitCommit, systemVersionResponse.gitCommit) &&
        Objects.equals(this.goVersion, systemVersionResponse.goVersion) &&
        Objects.equals(this.os, systemVersionResponse.os) &&
        Objects.equals(this.arch, systemVersionResponse.arch) &&
        Objects.equals(this.kernelVersion, systemVersionResponse.kernelVersion) &&
        Objects.equals(this.experimental, systemVersionResponse.experimental) &&
        Objects.equals(this.buildTime, systemVersionResponse.buildTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platform, components, version, apiVersion, minAPIVersion, gitCommit, goVersion, os, arch, kernelVersion, experimental, buildTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemVersionResponse {\n");
    
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    minAPIVersion: ").append(toIndentedString(minAPIVersion)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    experimental: ").append(toIndentedString(experimental)).append("\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

