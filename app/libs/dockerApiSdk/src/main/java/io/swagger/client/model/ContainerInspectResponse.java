/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ContainerConfig;
import io.swagger.client.model.ContainerInspectResponseState;
import io.swagger.client.model.GraphDriverData;
import io.swagger.client.model.HostConfig;
import io.swagger.client.model.MountPoint;
import io.swagger.client.model.NetworkSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ContainerInspectResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T23:55:34.685+04:00")
public class ContainerInspectResponse {
  @SerializedName("Id")
  private String id = null;

  @SerializedName("Created")
  private String created = null;

  @SerializedName("Path")
  private String path = null;

  @SerializedName("Args")
  private List<String> args = null;

  @SerializedName("State")
  private ContainerInspectResponseState state = null;

  @SerializedName("Image")
  private String image = null;

  @SerializedName("ResolvConfPath")
  private String resolvConfPath = null;

  @SerializedName("HostnamePath")
  private String hostnamePath = null;

  @SerializedName("HostsPath")
  private String hostsPath = null;

  @SerializedName("LogPath")
  private String logPath = null;

  @SerializedName("Node")
  private Object node = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("RestartCount")
  private Integer restartCount = null;

  @SerializedName("Driver")
  private String driver = null;

  @SerializedName("MountLabel")
  private String mountLabel = null;

  @SerializedName("ProcessLabel")
  private String processLabel = null;

  @SerializedName("AppArmorProfile")
  private String appArmorProfile = null;

  @SerializedName("ExecIDs")
  private String execIDs = null;

  @SerializedName("HostConfig")
  private HostConfig hostConfig = null;

  @SerializedName("GraphDriver")
  private GraphDriverData graphDriver = null;

  @SerializedName("SizeRw")
  private Long sizeRw = null;

  @SerializedName("SizeRootFs")
  private Long sizeRootFs = null;

  @SerializedName("Mounts")
  private List<MountPoint> mounts = null;

  @SerializedName("Config")
  private ContainerConfig config = null;

  @SerializedName("NetworkSettings")
  private NetworkSettings networkSettings = null;

  public ContainerInspectResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the container
   * @return id
  **/
  @ApiModelProperty(value = "The ID of the container")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ContainerInspectResponse created(String created) {
    this.created = created;
    return this;
  }

   /**
   * The time the container was created
   * @return created
  **/
  @ApiModelProperty(value = "The time the container was created")
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }

  public ContainerInspectResponse path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path to the command being run
   * @return path
  **/
  @ApiModelProperty(value = "The path to the command being run")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public ContainerInspectResponse args(List<String> args) {
    this.args = args;
    return this;
  }

  public ContainerInspectResponse addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<String>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * The arguments to the command being run
   * @return args
  **/
  @ApiModelProperty(value = "The arguments to the command being run")
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }

  public ContainerInspectResponse state(ContainerInspectResponseState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public ContainerInspectResponseState getState() {
    return state;
  }

  public void setState(ContainerInspectResponseState state) {
    this.state = state;
  }

  public ContainerInspectResponse image(String image) {
    this.image = image;
    return this;
  }

   /**
   * The container&#39;s image
   * @return image
  **/
  @ApiModelProperty(value = "The container's image")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ContainerInspectResponse resolvConfPath(String resolvConfPath) {
    this.resolvConfPath = resolvConfPath;
    return this;
  }

   /**
   * Get resolvConfPath
   * @return resolvConfPath
  **/
  @ApiModelProperty(value = "")
  public String getResolvConfPath() {
    return resolvConfPath;
  }

  public void setResolvConfPath(String resolvConfPath) {
    this.resolvConfPath = resolvConfPath;
  }

  public ContainerInspectResponse hostnamePath(String hostnamePath) {
    this.hostnamePath = hostnamePath;
    return this;
  }

   /**
   * Get hostnamePath
   * @return hostnamePath
  **/
  @ApiModelProperty(value = "")
  public String getHostnamePath() {
    return hostnamePath;
  }

  public void setHostnamePath(String hostnamePath) {
    this.hostnamePath = hostnamePath;
  }

  public ContainerInspectResponse hostsPath(String hostsPath) {
    this.hostsPath = hostsPath;
    return this;
  }

   /**
   * Get hostsPath
   * @return hostsPath
  **/
  @ApiModelProperty(value = "")
  public String getHostsPath() {
    return hostsPath;
  }

  public void setHostsPath(String hostsPath) {
    this.hostsPath = hostsPath;
  }

  public ContainerInspectResponse logPath(String logPath) {
    this.logPath = logPath;
    return this;
  }

   /**
   * Get logPath
   * @return logPath
  **/
  @ApiModelProperty(value = "")
  public String getLogPath() {
    return logPath;
  }

  public void setLogPath(String logPath) {
    this.logPath = logPath;
  }

  public ContainerInspectResponse node(Object node) {
    this.node = node;
    return this;
  }

   /**
   * TODO
   * @return node
  **/
  @ApiModelProperty(value = "TODO")
  public Object getNode() {
    return node;
  }

  public void setNode(Object node) {
    this.node = node;
  }

  public ContainerInspectResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContainerInspectResponse restartCount(Integer restartCount) {
    this.restartCount = restartCount;
    return this;
  }

   /**
   * Get restartCount
   * @return restartCount
  **/
  @ApiModelProperty(value = "")
  public Integer getRestartCount() {
    return restartCount;
  }

  public void setRestartCount(Integer restartCount) {
    this.restartCount = restartCount;
  }

  public ContainerInspectResponse driver(String driver) {
    this.driver = driver;
    return this;
  }

   /**
   * Get driver
   * @return driver
  **/
  @ApiModelProperty(value = "")
  public String getDriver() {
    return driver;
  }

  public void setDriver(String driver) {
    this.driver = driver;
  }

  public ContainerInspectResponse mountLabel(String mountLabel) {
    this.mountLabel = mountLabel;
    return this;
  }

   /**
   * Get mountLabel
   * @return mountLabel
  **/
  @ApiModelProperty(value = "")
  public String getMountLabel() {
    return mountLabel;
  }

  public void setMountLabel(String mountLabel) {
    this.mountLabel = mountLabel;
  }

  public ContainerInspectResponse processLabel(String processLabel) {
    this.processLabel = processLabel;
    return this;
  }

   /**
   * Get processLabel
   * @return processLabel
  **/
  @ApiModelProperty(value = "")
  public String getProcessLabel() {
    return processLabel;
  }

  public void setProcessLabel(String processLabel) {
    this.processLabel = processLabel;
  }

  public ContainerInspectResponse appArmorProfile(String appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
    return this;
  }

   /**
   * Get appArmorProfile
   * @return appArmorProfile
  **/
  @ApiModelProperty(value = "")
  public String getAppArmorProfile() {
    return appArmorProfile;
  }

  public void setAppArmorProfile(String appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
  }

  public ContainerInspectResponse execIDs(String execIDs) {
    this.execIDs = execIDs;
    return this;
  }

   /**
   * Get execIDs
   * @return execIDs
  **/
  @ApiModelProperty(value = "")
  public String getExecIDs() {
    return execIDs;
  }

  public void setExecIDs(String execIDs) {
    this.execIDs = execIDs;
  }

  public ContainerInspectResponse hostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
    return this;
  }

   /**
   * Get hostConfig
   * @return hostConfig
  **/
  @ApiModelProperty(value = "")
  public HostConfig getHostConfig() {
    return hostConfig;
  }

  public void setHostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
  }

  public ContainerInspectResponse graphDriver(GraphDriverData graphDriver) {
    this.graphDriver = graphDriver;
    return this;
  }

   /**
   * Get graphDriver
   * @return graphDriver
  **/
  @ApiModelProperty(value = "")
  public GraphDriverData getGraphDriver() {
    return graphDriver;
  }

  public void setGraphDriver(GraphDriverData graphDriver) {
    this.graphDriver = graphDriver;
  }

  public ContainerInspectResponse sizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
    return this;
  }

   /**
   * The size of files that have been created or changed by this container.
   * @return sizeRw
  **/
  @ApiModelProperty(value = "The size of files that have been created or changed by this container.")
  public Long getSizeRw() {
    return sizeRw;
  }

  public void setSizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
  }

  public ContainerInspectResponse sizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
    return this;
  }

   /**
   * The total size of all the files in this container.
   * @return sizeRootFs
  **/
  @ApiModelProperty(value = "The total size of all the files in this container.")
  public Long getSizeRootFs() {
    return sizeRootFs;
  }

  public void setSizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
  }

  public ContainerInspectResponse mounts(List<MountPoint> mounts) {
    this.mounts = mounts;
    return this;
  }

  public ContainerInspectResponse addMountsItem(MountPoint mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<MountPoint>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

   /**
   * Get mounts
   * @return mounts
  **/
  @ApiModelProperty(value = "")
  public List<MountPoint> getMounts() {
    return mounts;
  }

  public void setMounts(List<MountPoint> mounts) {
    this.mounts = mounts;
  }

  public ContainerInspectResponse config(ContainerConfig config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(value = "")
  public ContainerConfig getConfig() {
    return config;
  }

  public void setConfig(ContainerConfig config) {
    this.config = config;
  }

  public ContainerInspectResponse networkSettings(NetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
    return this;
  }

   /**
   * Get networkSettings
   * @return networkSettings
  **/
  @ApiModelProperty(value = "")
  public NetworkSettings getNetworkSettings() {
    return networkSettings;
  }

  public void setNetworkSettings(NetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerInspectResponse containerInspectResponse = (ContainerInspectResponse) o;
    return Objects.equals(this.id, containerInspectResponse.id) &&
        Objects.equals(this.created, containerInspectResponse.created) &&
        Objects.equals(this.path, containerInspectResponse.path) &&
        Objects.equals(this.args, containerInspectResponse.args) &&
        Objects.equals(this.state, containerInspectResponse.state) &&
        Objects.equals(this.image, containerInspectResponse.image) &&
        Objects.equals(this.resolvConfPath, containerInspectResponse.resolvConfPath) &&
        Objects.equals(this.hostnamePath, containerInspectResponse.hostnamePath) &&
        Objects.equals(this.hostsPath, containerInspectResponse.hostsPath) &&
        Objects.equals(this.logPath, containerInspectResponse.logPath) &&
        Objects.equals(this.node, containerInspectResponse.node) &&
        Objects.equals(this.name, containerInspectResponse.name) &&
        Objects.equals(this.restartCount, containerInspectResponse.restartCount) &&
        Objects.equals(this.driver, containerInspectResponse.driver) &&
        Objects.equals(this.mountLabel, containerInspectResponse.mountLabel) &&
        Objects.equals(this.processLabel, containerInspectResponse.processLabel) &&
        Objects.equals(this.appArmorProfile, containerInspectResponse.appArmorProfile) &&
        Objects.equals(this.execIDs, containerInspectResponse.execIDs) &&
        Objects.equals(this.hostConfig, containerInspectResponse.hostConfig) &&
        Objects.equals(this.graphDriver, containerInspectResponse.graphDriver) &&
        Objects.equals(this.sizeRw, containerInspectResponse.sizeRw) &&
        Objects.equals(this.sizeRootFs, containerInspectResponse.sizeRootFs) &&
        Objects.equals(this.mounts, containerInspectResponse.mounts) &&
        Objects.equals(this.config, containerInspectResponse.config) &&
        Objects.equals(this.networkSettings, containerInspectResponse.networkSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, created, path, args, state, image, resolvConfPath, hostnamePath, hostsPath, logPath, node, name, restartCount, driver, mountLabel, processLabel, appArmorProfile, execIDs, hostConfig, graphDriver, sizeRw, sizeRootFs, mounts, config, networkSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerInspectResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    resolvConfPath: ").append(toIndentedString(resolvConfPath)).append("\n");
    sb.append("    hostnamePath: ").append(toIndentedString(hostnamePath)).append("\n");
    sb.append("    hostsPath: ").append(toIndentedString(hostsPath)).append("\n");
    sb.append("    logPath: ").append(toIndentedString(logPath)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    restartCount: ").append(toIndentedString(restartCount)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    mountLabel: ").append(toIndentedString(mountLabel)).append("\n");
    sb.append("    processLabel: ").append(toIndentedString(processLabel)).append("\n");
    sb.append("    appArmorProfile: ").append(toIndentedString(appArmorProfile)).append("\n");
    sb.append("    execIDs: ").append(toIndentedString(execIDs)).append("\n");
    sb.append("    hostConfig: ").append(toIndentedString(hostConfig)).append("\n");
    sb.append("    graphDriver: ").append(toIndentedString(graphDriver)).append("\n");
    sb.append("    sizeRw: ").append(toIndentedString(sizeRw)).append("\n");
    sb.append("    sizeRootFs: ").append(toIndentedString(sizeRootFs)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    networkSettings: ").append(toIndentedString(networkSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

