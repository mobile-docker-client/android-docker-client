/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ExecConfig
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T04:24:49.247+04:00")
public class ExecConfig {
  @SerializedName("AttachStdin")
  private Boolean attachStdin = null;

  @SerializedName("AttachStdout")
  private Boolean attachStdout = null;

  @SerializedName("AttachStderr")
  private Boolean attachStderr = null;

  @SerializedName("DetachKeys")
  private String detachKeys = null;

  @SerializedName("Tty")
  private Boolean tty = null;

  @SerializedName("Env")
  private List<String> env = null;

  @SerializedName("Cmd")
  private List<String> cmd = null;

  @SerializedName("Privileged")
  private Boolean privileged = false;

  @SerializedName("User")
  private String user = null;

  @SerializedName("WorkingDir")
  private String workingDir = null;

  public ExecConfig attachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
    return this;
  }

   /**
   * Attach to &#x60;stdin&#x60; of the exec command.
   * @return attachStdin
  **/
  @ApiModelProperty(value = "Attach to `stdin` of the exec command.")
  public Boolean isAttachStdin() {
    return attachStdin;
  }

  public void setAttachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
  }

  public ExecConfig attachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
    return this;
  }

   /**
   * Attach to &#x60;stdout&#x60; of the exec command.
   * @return attachStdout
  **/
  @ApiModelProperty(value = "Attach to `stdout` of the exec command.")
  public Boolean isAttachStdout() {
    return attachStdout;
  }

  public void setAttachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
  }

  public ExecConfig attachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
    return this;
  }

   /**
   * Attach to &#x60;stderr&#x60; of the exec command.
   * @return attachStderr
  **/
  @ApiModelProperty(value = "Attach to `stderr` of the exec command.")
  public Boolean isAttachStderr() {
    return attachStderr;
  }

  public void setAttachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
  }

  public ExecConfig detachKeys(String detachKeys) {
    this.detachKeys = detachKeys;
    return this;
  }

   /**
   * Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;.
   * @return detachKeys
  **/
  @ApiModelProperty(value = "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.")
  public String getDetachKeys() {
    return detachKeys;
  }

  public void setDetachKeys(String detachKeys) {
    this.detachKeys = detachKeys;
  }

  public ExecConfig tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

   /**
   * Allocate a pseudo-TTY.
   * @return tty
  **/
  @ApiModelProperty(value = "Allocate a pseudo-TTY.")
  public Boolean isTty() {
    return tty;
  }

  public void setTty(Boolean tty) {
    this.tty = tty;
  }

  public ExecConfig env(List<String> env) {
    this.env = env;
    return this;
  }

  public ExecConfig addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<String>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * A list of environment variables in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;.
   * @return env
  **/
  @ApiModelProperty(value = "A list of environment variables in the form `[\"VAR=value\", ...]`.")
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }

  public ExecConfig cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ExecConfig addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<String>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Command to run, as a string or array of strings.
   * @return cmd
  **/
  @ApiModelProperty(value = "Command to run, as a string or array of strings.")
  public List<String> getCmd() {
    return cmd;
  }

  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }

  public ExecConfig privileged(Boolean privileged) {
    this.privileged = privileged;
    return this;
  }

   /**
   * Runs the exec process with extended privileges.
   * @return privileged
  **/
  @ApiModelProperty(value = "Runs the exec process with extended privileges.")
  public Boolean isPrivileged() {
    return privileged;
  }

  public void setPrivileged(Boolean privileged) {
    this.privileged = privileged;
  }

  public ExecConfig user(String user) {
    this.user = user;
    return this;
  }

   /**
   * The user, and optionally, group to run the exec process inside the container. Format is one of: &#x60;user&#x60;, &#x60;user:group&#x60;, &#x60;uid&#x60;, or &#x60;uid:gid&#x60;.
   * @return user
  **/
  @ApiModelProperty(value = "The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`.")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public ExecConfig workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

   /**
   * The working directory for the exec process inside the container.
   * @return workingDir
  **/
  @ApiModelProperty(value = "The working directory for the exec process inside the container.")
  public String getWorkingDir() {
    return workingDir;
  }

  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecConfig execConfig = (ExecConfig) o;
    return Objects.equals(this.attachStdin, execConfig.attachStdin) &&
        Objects.equals(this.attachStdout, execConfig.attachStdout) &&
        Objects.equals(this.attachStderr, execConfig.attachStderr) &&
        Objects.equals(this.detachKeys, execConfig.detachKeys) &&
        Objects.equals(this.tty, execConfig.tty) &&
        Objects.equals(this.env, execConfig.env) &&
        Objects.equals(this.cmd, execConfig.cmd) &&
        Objects.equals(this.privileged, execConfig.privileged) &&
        Objects.equals(this.user, execConfig.user) &&
        Objects.equals(this.workingDir, execConfig.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachStdin, attachStdout, attachStderr, detachKeys, tty, env, cmd, privileged, user, workingDir);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecConfig {\n");
    
    sb.append("    attachStdin: ").append(toIndentedString(attachStdin)).append("\n");
    sb.append("    attachStdout: ").append(toIndentedString(attachStdout)).append("\n");
    sb.append("    attachStderr: ").append(toIndentedString(attachStderr)).append("\n");
    sb.append("    detachKeys: ").append(toIndentedString(detachKeys)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

