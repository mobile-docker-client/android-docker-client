/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The state of the container.
 */
@ApiModel(description = "The state of the container.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-17T00:16:49.279+04:00")
public class ContainerInspectResponseState {
  /**
   * The status of the container. For example, &#x60;\&quot;running\&quot;&#x60; or &#x60;\&quot;exited\&quot;&#x60;. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("created"),
    
    RUNNING("running"),
    
    PAUSED("paused"),
    
    RESTARTING("restarting"),
    
    REMOVING("removing"),
    
    EXITED("exited"),
    
    DEAD("dead");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("Running")
  private Boolean running = null;

  @SerializedName("Paused")
  private Boolean paused = null;

  @SerializedName("Restarting")
  private Boolean restarting = null;

  @SerializedName("OOMKilled")
  private Boolean ooMKilled = null;

  @SerializedName("Dead")
  private Boolean dead = null;

  @SerializedName("Pid")
  private Integer pid = null;

  @SerializedName("ExitCode")
  private Integer exitCode = null;

  @SerializedName("Error")
  private String error = null;

  @SerializedName("StartedAt")
  private String startedAt = null;

  @SerializedName("FinishedAt")
  private String finishedAt = null;

  public ContainerInspectResponseState status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the container. For example, &#x60;\&quot;running\&quot;&#x60; or &#x60;\&quot;exited\&quot;&#x60;. 
   * @return status
  **/
  @ApiModelProperty(value = "The status of the container. For example, `\"running\"` or `\"exited\"`. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ContainerInspectResponseState running(Boolean running) {
    this.running = running;
    return this;
  }

   /**
   * Whether this container is running.  Note that a running container can be _paused_. The &#x60;Running&#x60; and &#x60;Paused&#x60; booleans are not mutually exclusive:  When pausing a container (on Linux), the cgroups freezer is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both &#x60;Running&#x60; _and_ &#x60;Paused&#x60;.  Use the &#x60;Status&#x60; field instead to determine if a container&#39;s state is \&quot;running\&quot;. 
   * @return running
  **/
  @ApiModelProperty(value = "Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the cgroups freezer is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\". ")
  public Boolean isRunning() {
    return running;
  }

  public void setRunning(Boolean running) {
    this.running = running;
  }

  public ContainerInspectResponseState paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Whether this container is paused.
   * @return paused
  **/
  @ApiModelProperty(value = "Whether this container is paused.")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public ContainerInspectResponseState restarting(Boolean restarting) {
    this.restarting = restarting;
    return this;
  }

   /**
   * Whether this container is restarting.
   * @return restarting
  **/
  @ApiModelProperty(value = "Whether this container is restarting.")
  public Boolean isRestarting() {
    return restarting;
  }

  public void setRestarting(Boolean restarting) {
    this.restarting = restarting;
  }

  public ContainerInspectResponseState ooMKilled(Boolean ooMKilled) {
    this.ooMKilled = ooMKilled;
    return this;
  }

   /**
   * Whether this container has been killed because it ran out of memory.
   * @return ooMKilled
  **/
  @ApiModelProperty(value = "Whether this container has been killed because it ran out of memory.")
  public Boolean isOoMKilled() {
    return ooMKilled;
  }

  public void setOoMKilled(Boolean ooMKilled) {
    this.ooMKilled = ooMKilled;
  }

  public ContainerInspectResponseState dead(Boolean dead) {
    this.dead = dead;
    return this;
  }

   /**
   * Get dead
   * @return dead
  **/
  @ApiModelProperty(value = "")
  public Boolean isDead() {
    return dead;
  }

  public void setDead(Boolean dead) {
    this.dead = dead;
  }

  public ContainerInspectResponseState pid(Integer pid) {
    this.pid = pid;
    return this;
  }

   /**
   * The process ID of this container
   * @return pid
  **/
  @ApiModelProperty(value = "The process ID of this container")
  public Integer getPid() {
    return pid;
  }

  public void setPid(Integer pid) {
    this.pid = pid;
  }

  public ContainerInspectResponseState exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

   /**
   * The last exit code of this container
   * @return exitCode
  **/
  @ApiModelProperty(value = "The last exit code of this container")
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }

  public ContainerInspectResponseState error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public ContainerInspectResponseState startedAt(String startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * The time when this container was last started.
   * @return startedAt
  **/
  @ApiModelProperty(value = "The time when this container was last started.")
  public String getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(String startedAt) {
    this.startedAt = startedAt;
  }

  public ContainerInspectResponseState finishedAt(String finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * The time when this container last exited.
   * @return finishedAt
  **/
  @ApiModelProperty(value = "The time when this container last exited.")
  public String getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(String finishedAt) {
    this.finishedAt = finishedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerInspectResponseState containerInspectResponseState = (ContainerInspectResponseState) o;
    return Objects.equals(this.status, containerInspectResponseState.status) &&
        Objects.equals(this.running, containerInspectResponseState.running) &&
        Objects.equals(this.paused, containerInspectResponseState.paused) &&
        Objects.equals(this.restarting, containerInspectResponseState.restarting) &&
        Objects.equals(this.ooMKilled, containerInspectResponseState.ooMKilled) &&
        Objects.equals(this.dead, containerInspectResponseState.dead) &&
        Objects.equals(this.pid, containerInspectResponseState.pid) &&
        Objects.equals(this.exitCode, containerInspectResponseState.exitCode) &&
        Objects.equals(this.error, containerInspectResponseState.error) &&
        Objects.equals(this.startedAt, containerInspectResponseState.startedAt) &&
        Objects.equals(this.finishedAt, containerInspectResponseState.finishedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, running, paused, restarting, ooMKilled, dead, pid, exitCode, error, startedAt, finishedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerInspectResponseState {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    restarting: ").append(toIndentedString(restarting)).append("\n");
    sb.append("    ooMKilled: ").append(toIndentedString(ooMKilled)).append("\n");
    sb.append("    dead: ").append(toIndentedString(dead)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

