/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SwarmSpecCAConfigExternalCAs;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CA configuration.
 */
@ApiModel(description = "CA configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T04:24:49.247+04:00")
public class SwarmSpecCAConfig {
  @SerializedName("NodeCertExpiry")
  private Long nodeCertExpiry = null;

  @SerializedName("ExternalCAs")
  private List<SwarmSpecCAConfigExternalCAs> externalCAs = null;

  @SerializedName("SigningCACert")
  private String signingCACert = null;

  @SerializedName("SigningCAKey")
  private String signingCAKey = null;

  @SerializedName("ForceRotate")
  private Integer forceRotate = null;

  public SwarmSpecCAConfig nodeCertExpiry(Long nodeCertExpiry) {
    this.nodeCertExpiry = nodeCertExpiry;
    return this;
  }

   /**
   * The duration node certificates are issued for.
   * @return nodeCertExpiry
  **/
  @ApiModelProperty(example = "7776000000000000", value = "The duration node certificates are issued for.")
  public Long getNodeCertExpiry() {
    return nodeCertExpiry;
  }

  public void setNodeCertExpiry(Long nodeCertExpiry) {
    this.nodeCertExpiry = nodeCertExpiry;
  }

  public SwarmSpecCAConfig externalCAs(List<SwarmSpecCAConfigExternalCAs> externalCAs) {
    this.externalCAs = externalCAs;
    return this;
  }

  public SwarmSpecCAConfig addExternalCAsItem(SwarmSpecCAConfigExternalCAs externalCAsItem) {
    if (this.externalCAs == null) {
      this.externalCAs = new ArrayList<SwarmSpecCAConfigExternalCAs>();
    }
    this.externalCAs.add(externalCAsItem);
    return this;
  }

   /**
   * Configuration for forwarding signing requests to an external certificate authority.
   * @return externalCAs
  **/
  @ApiModelProperty(value = "Configuration for forwarding signing requests to an external certificate authority.")
  public List<SwarmSpecCAConfigExternalCAs> getExternalCAs() {
    return externalCAs;
  }

  public void setExternalCAs(List<SwarmSpecCAConfigExternalCAs> externalCAs) {
    this.externalCAs = externalCAs;
  }

  public SwarmSpecCAConfig signingCACert(String signingCACert) {
    this.signingCACert = signingCACert;
    return this;
  }

   /**
   * The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.
   * @return signingCACert
  **/
  @ApiModelProperty(value = "The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.")
  public String getSigningCACert() {
    return signingCACert;
  }

  public void setSigningCACert(String signingCACert) {
    this.signingCACert = signingCACert;
  }

  public SwarmSpecCAConfig signingCAKey(String signingCAKey) {
    this.signingCAKey = signingCAKey;
    return this;
  }

   /**
   * The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.
   * @return signingCAKey
  **/
  @ApiModelProperty(value = "The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.")
  public String getSigningCAKey() {
    return signingCAKey;
  }

  public void setSigningCAKey(String signingCAKey) {
    this.signingCAKey = signingCAKey;
  }

  public SwarmSpecCAConfig forceRotate(Integer forceRotate) {
    this.forceRotate = forceRotate;
    return this;
  }

   /**
   * An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in &#x60;SigningCACert&#x60; and &#x60;SigningCAKey&#x60;
   * @return forceRotate
  **/
  @ApiModelProperty(value = "An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`")
  public Integer getForceRotate() {
    return forceRotate;
  }

  public void setForceRotate(Integer forceRotate) {
    this.forceRotate = forceRotate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwarmSpecCAConfig swarmSpecCAConfig = (SwarmSpecCAConfig) o;
    return Objects.equals(this.nodeCertExpiry, swarmSpecCAConfig.nodeCertExpiry) &&
        Objects.equals(this.externalCAs, swarmSpecCAConfig.externalCAs) &&
        Objects.equals(this.signingCACert, swarmSpecCAConfig.signingCACert) &&
        Objects.equals(this.signingCAKey, swarmSpecCAConfig.signingCAKey) &&
        Objects.equals(this.forceRotate, swarmSpecCAConfig.forceRotate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeCertExpiry, externalCAs, signingCACert, signingCAKey, forceRotate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwarmSpecCAConfig {\n");
    
    sb.append("    nodeCertExpiry: ").append(toIndentedString(nodeCertExpiry)).append("\n");
    sb.append("    externalCAs: ").append(toIndentedString(externalCAs)).append("\n");
    sb.append("    signingCACert: ").append(toIndentedString(signingCACert)).append("\n");
    sb.append("    signingCAKey: ").append(toIndentedString(signingCAKey)).append("\n");
    sb.append("    forceRotate: ").append(toIndentedString(forceRotate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

