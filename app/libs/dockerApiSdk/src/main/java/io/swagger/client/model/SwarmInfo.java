/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ClusterInfo;
import io.swagger.client.model.LocalNodeState;
import io.swagger.client.model.PeerNode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents generic information about swarm. 
 */
@ApiModel(description = "Represents generic information about swarm. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T23:55:34.685+04:00")
public class SwarmInfo {
  @SerializedName("NodeID")
  private String nodeID = "";

  @SerializedName("NodeAddr")
  private String nodeAddr = "";

  @SerializedName("LocalNodeState")
  private LocalNodeState localNodeState = null;

  @SerializedName("ControlAvailable")
  private Boolean controlAvailable = false;

  @SerializedName("Error")
  private String error = "";

  @SerializedName("RemoteManagers")
  private List<PeerNode> remoteManagers = null;

  @SerializedName("Nodes")
  private Integer nodes = null;

  @SerializedName("Managers")
  private Integer managers = null;

  @SerializedName("Cluster")
  private ClusterInfo cluster = null;

  public SwarmInfo nodeID(String nodeID) {
    this.nodeID = nodeID;
    return this;
  }

   /**
   * Unique identifier of for this node in the swarm.
   * @return nodeID
  **/
  @ApiModelProperty(example = "k67qz4598weg5unwwffg6z1m1", value = "Unique identifier of for this node in the swarm.")
  public String getNodeID() {
    return nodeID;
  }

  public void setNodeID(String nodeID) {
    this.nodeID = nodeID;
  }

  public SwarmInfo nodeAddr(String nodeAddr) {
    this.nodeAddr = nodeAddr;
    return this;
  }

   /**
   * IP address at which this node can be reached by other nodes in the swarm. 
   * @return nodeAddr
  **/
  @ApiModelProperty(example = "10.0.0.46", value = "IP address at which this node can be reached by other nodes in the swarm. ")
  public String getNodeAddr() {
    return nodeAddr;
  }

  public void setNodeAddr(String nodeAddr) {
    this.nodeAddr = nodeAddr;
  }

  public SwarmInfo localNodeState(LocalNodeState localNodeState) {
    this.localNodeState = localNodeState;
    return this;
  }

   /**
   * Get localNodeState
   * @return localNodeState
  **/
  @ApiModelProperty(value = "")
  public LocalNodeState getLocalNodeState() {
    return localNodeState;
  }

  public void setLocalNodeState(LocalNodeState localNodeState) {
    this.localNodeState = localNodeState;
  }

  public SwarmInfo controlAvailable(Boolean controlAvailable) {
    this.controlAvailable = controlAvailable;
    return this;
  }

   /**
   * Get controlAvailable
   * @return controlAvailable
  **/
  @ApiModelProperty(example = "true", value = "")
  public Boolean isControlAvailable() {
    return controlAvailable;
  }

  public void setControlAvailable(Boolean controlAvailable) {
    this.controlAvailable = controlAvailable;
  }

  public SwarmInfo error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public SwarmInfo remoteManagers(List<PeerNode> remoteManagers) {
    this.remoteManagers = remoteManagers;
    return this;
  }

  public SwarmInfo addRemoteManagersItem(PeerNode remoteManagersItem) {
    if (this.remoteManagers == null) {
      this.remoteManagers = new ArrayList<PeerNode>();
    }
    this.remoteManagers.add(remoteManagersItem);
    return this;
  }

   /**
   * List of ID&#39;s and addresses of other managers in the swarm. 
   * @return remoteManagers
  **/
  @ApiModelProperty(example = "[{\"NodeID\":\"71izy0goik036k48jg985xnds\",\"Addr\":\"10.0.0.158:2377\"},{\"NodeID\":\"79y6h1o4gv8n120drcprv5nmc\",\"Addr\":\"10.0.0.159:2377\"},{\"NodeID\":\"k67qz4598weg5unwwffg6z1m1\",\"Addr\":\"10.0.0.46:2377\"}]", value = "List of ID's and addresses of other managers in the swarm. ")
  public List<PeerNode> getRemoteManagers() {
    return remoteManagers;
  }

  public void setRemoteManagers(List<PeerNode> remoteManagers) {
    this.remoteManagers = remoteManagers;
  }

  public SwarmInfo nodes(Integer nodes) {
    this.nodes = nodes;
    return this;
  }

   /**
   * Total number of nodes in the swarm.
   * @return nodes
  **/
  @ApiModelProperty(example = "4", value = "Total number of nodes in the swarm.")
  public Integer getNodes() {
    return nodes;
  }

  public void setNodes(Integer nodes) {
    this.nodes = nodes;
  }

  public SwarmInfo managers(Integer managers) {
    this.managers = managers;
    return this;
  }

   /**
   * Total number of managers in the swarm.
   * @return managers
  **/
  @ApiModelProperty(example = "3", value = "Total number of managers in the swarm.")
  public Integer getManagers() {
    return managers;
  }

  public void setManagers(Integer managers) {
    this.managers = managers;
  }

  public SwarmInfo cluster(ClusterInfo cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @ApiModelProperty(value = "")
  public ClusterInfo getCluster() {
    return cluster;
  }

  public void setCluster(ClusterInfo cluster) {
    this.cluster = cluster;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwarmInfo swarmInfo = (SwarmInfo) o;
    return Objects.equals(this.nodeID, swarmInfo.nodeID) &&
        Objects.equals(this.nodeAddr, swarmInfo.nodeAddr) &&
        Objects.equals(this.localNodeState, swarmInfo.localNodeState) &&
        Objects.equals(this.controlAvailable, swarmInfo.controlAvailable) &&
        Objects.equals(this.error, swarmInfo.error) &&
        Objects.equals(this.remoteManagers, swarmInfo.remoteManagers) &&
        Objects.equals(this.nodes, swarmInfo.nodes) &&
        Objects.equals(this.managers, swarmInfo.managers) &&
        Objects.equals(this.cluster, swarmInfo.cluster);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeID, nodeAddr, localNodeState, controlAvailable, error, remoteManagers, nodes, managers, cluster);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwarmInfo {\n");
    
    sb.append("    nodeID: ").append(toIndentedString(nodeID)).append("\n");
    sb.append("    nodeAddr: ").append(toIndentedString(nodeAddr)).append("\n");
    sb.append("    localNodeState: ").append(toIndentedString(localNodeState)).append("\n");
    sb.append("    controlAvailable: ").append(toIndentedString(controlAvailable)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    remoteManagers: ").append(toIndentedString(remoteManagers)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    managers: ").append(toIndentedString(managers)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

