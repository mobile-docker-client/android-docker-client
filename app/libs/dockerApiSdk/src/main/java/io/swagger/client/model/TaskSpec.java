/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TaskSpecContainerSpec;
import io.swagger.client.model.TaskSpecLogDriver;
import io.swagger.client.model.TaskSpecNetworks;
import io.swagger.client.model.TaskSpecPlacement;
import io.swagger.client.model.TaskSpecPluginSpec;
import io.swagger.client.model.TaskSpecResources;
import io.swagger.client.model.TaskSpecRestartPolicy;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * User modifiable task configuration.
 */
@ApiModel(description = "User modifiable task configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-17T00:16:49.279+04:00")
public class TaskSpec {
  @SerializedName("PluginSpec")
  private TaskSpecPluginSpec pluginSpec = null;

  @SerializedName("ContainerSpec")
  private TaskSpecContainerSpec containerSpec = null;

  @SerializedName("Resources")
  private TaskSpecResources resources = null;

  @SerializedName("RestartPolicy")
  private TaskSpecRestartPolicy restartPolicy = null;

  @SerializedName("Placement")
  private TaskSpecPlacement placement = null;

  @SerializedName("ForceUpdate")
  private Integer forceUpdate = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("Networks")
  private List<TaskSpecNetworks> networks = null;

  @SerializedName("LogDriver")
  private TaskSpecLogDriver logDriver = null;

  public TaskSpec pluginSpec(TaskSpecPluginSpec pluginSpec) {
    this.pluginSpec = pluginSpec;
    return this;
  }

   /**
   * Get pluginSpec
   * @return pluginSpec
  **/
  @ApiModelProperty(value = "")
  public TaskSpecPluginSpec getPluginSpec() {
    return pluginSpec;
  }

  public void setPluginSpec(TaskSpecPluginSpec pluginSpec) {
    this.pluginSpec = pluginSpec;
  }

  public TaskSpec containerSpec(TaskSpecContainerSpec containerSpec) {
    this.containerSpec = containerSpec;
    return this;
  }

   /**
   * Get containerSpec
   * @return containerSpec
  **/
  @ApiModelProperty(value = "")
  public TaskSpecContainerSpec getContainerSpec() {
    return containerSpec;
  }

  public void setContainerSpec(TaskSpecContainerSpec containerSpec) {
    this.containerSpec = containerSpec;
  }

  public TaskSpec resources(TaskSpecResources resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @ApiModelProperty(value = "")
  public TaskSpecResources getResources() {
    return resources;
  }

  public void setResources(TaskSpecResources resources) {
    this.resources = resources;
  }

  public TaskSpec restartPolicy(TaskSpecRestartPolicy restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

   /**
   * Get restartPolicy
   * @return restartPolicy
  **/
  @ApiModelProperty(value = "")
  public TaskSpecRestartPolicy getRestartPolicy() {
    return restartPolicy;
  }

  public void setRestartPolicy(TaskSpecRestartPolicy restartPolicy) {
    this.restartPolicy = restartPolicy;
  }

  public TaskSpec placement(TaskSpecPlacement placement) {
    this.placement = placement;
    return this;
  }

   /**
   * Get placement
   * @return placement
  **/
  @ApiModelProperty(value = "")
  public TaskSpecPlacement getPlacement() {
    return placement;
  }

  public void setPlacement(TaskSpecPlacement placement) {
    this.placement = placement;
  }

  public TaskSpec forceUpdate(Integer forceUpdate) {
    this.forceUpdate = forceUpdate;
    return this;
  }

   /**
   * A counter that triggers an update even if no relevant parameters have been changed.
   * @return forceUpdate
  **/
  @ApiModelProperty(value = "A counter that triggers an update even if no relevant parameters have been changed.")
  public Integer getForceUpdate() {
    return forceUpdate;
  }

  public void setForceUpdate(Integer forceUpdate) {
    this.forceUpdate = forceUpdate;
  }

  public TaskSpec runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Runtime is the type of runtime specified for the task executor.
   * @return runtime
  **/
  @ApiModelProperty(value = "Runtime is the type of runtime specified for the task executor.")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public TaskSpec networks(List<TaskSpecNetworks> networks) {
    this.networks = networks;
    return this;
  }

  public TaskSpec addNetworksItem(TaskSpecNetworks networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<TaskSpecNetworks>();
    }
    this.networks.add(networksItem);
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @ApiModelProperty(value = "")
  public List<TaskSpecNetworks> getNetworks() {
    return networks;
  }

  public void setNetworks(List<TaskSpecNetworks> networks) {
    this.networks = networks;
  }

  public TaskSpec logDriver(TaskSpecLogDriver logDriver) {
    this.logDriver = logDriver;
    return this;
  }

   /**
   * Get logDriver
   * @return logDriver
  **/
  @ApiModelProperty(value = "")
  public TaskSpecLogDriver getLogDriver() {
    return logDriver;
  }

  public void setLogDriver(TaskSpecLogDriver logDriver) {
    this.logDriver = logDriver;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSpec taskSpec = (TaskSpec) o;
    return Objects.equals(this.pluginSpec, taskSpec.pluginSpec) &&
        Objects.equals(this.containerSpec, taskSpec.containerSpec) &&
        Objects.equals(this.resources, taskSpec.resources) &&
        Objects.equals(this.restartPolicy, taskSpec.restartPolicy) &&
        Objects.equals(this.placement, taskSpec.placement) &&
        Objects.equals(this.forceUpdate, taskSpec.forceUpdate) &&
        Objects.equals(this.runtime, taskSpec.runtime) &&
        Objects.equals(this.networks, taskSpec.networks) &&
        Objects.equals(this.logDriver, taskSpec.logDriver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginSpec, containerSpec, resources, restartPolicy, placement, forceUpdate, runtime, networks, logDriver);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSpec {\n");
    
    sb.append("    pluginSpec: ").append(toIndentedString(pluginSpec)).append("\n");
    sb.append("    containerSpec: ").append(toIndentedString(containerSpec)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    forceUpdate: ").append(toIndentedString(forceUpdate)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    logDriver: ").append(toIndentedString(logDriver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

