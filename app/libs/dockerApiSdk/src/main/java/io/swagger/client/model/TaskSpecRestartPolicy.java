/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Specification for the restart policy which applies to containers created as part of this service.
 */
@ApiModel(description = "Specification for the restart policy which applies to containers created as part of this service.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T23:55:34.685+04:00")
public class TaskSpecRestartPolicy {
  /**
   * Condition for restart.
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    NONE("none"),
    
    ON_FAILURE("on-failure"),
    
    ANY("any");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String text) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConditionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Condition")
  private ConditionEnum condition = null;

  @SerializedName("Delay")
  private Long delay = null;

  @SerializedName("MaxAttempts")
  private Long maxAttempts = 0l;

  @SerializedName("Window")
  private Long window = 0l;

  public TaskSpecRestartPolicy condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Condition for restart.
   * @return condition
  **/
  @ApiModelProperty(value = "Condition for restart.")
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }

  public TaskSpecRestartPolicy delay(Long delay) {
    this.delay = delay;
    return this;
  }

   /**
   * Delay between restart attempts.
   * @return delay
  **/
  @ApiModelProperty(value = "Delay between restart attempts.")
  public Long getDelay() {
    return delay;
  }

  public void setDelay(Long delay) {
    this.delay = delay;
  }

  public TaskSpecRestartPolicy maxAttempts(Long maxAttempts) {
    this.maxAttempts = maxAttempts;
    return this;
  }

   /**
   * Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).
   * @return maxAttempts
  **/
  @ApiModelProperty(value = "Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).")
  public Long getMaxAttempts() {
    return maxAttempts;
  }

  public void setMaxAttempts(Long maxAttempts) {
    this.maxAttempts = maxAttempts;
  }

  public TaskSpecRestartPolicy window(Long window) {
    this.window = window;
    return this;
  }

   /**
   * Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).
   * @return window
  **/
  @ApiModelProperty(value = "Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).")
  public Long getWindow() {
    return window;
  }

  public void setWindow(Long window) {
    this.window = window;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSpecRestartPolicy taskSpecRestartPolicy = (TaskSpecRestartPolicy) o;
    return Objects.equals(this.condition, taskSpecRestartPolicy.condition) &&
        Objects.equals(this.delay, taskSpecRestartPolicy.delay) &&
        Objects.equals(this.maxAttempts, taskSpecRestartPolicy.maxAttempts) &&
        Objects.equals(this.window, taskSpecRestartPolicy.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, delay, maxAttempts, window);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSpecRestartPolicy {\n");
    
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

