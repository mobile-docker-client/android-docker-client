/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.37) is used. For example, calling `/info` is the same as calling `/v1.36/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.37
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Platform;
import io.swagger.client.model.TaskSpecPlacementPreferences;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TaskSpecPlacement
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-17T00:16:49.279+04:00")
public class TaskSpecPlacement {
  @SerializedName("Constraints")
  private List<String> constraints = null;

  @SerializedName("Preferences")
  private List<TaskSpecPlacementPreferences> preferences = null;

  @SerializedName("Platforms")
  private List<Platform> platforms = null;

  public TaskSpecPlacement constraints(List<String> constraints) {
    this.constraints = constraints;
    return this;
  }

  public TaskSpecPlacement addConstraintsItem(String constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<String>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * An array of constraints.
   * @return constraints
  **/
  @ApiModelProperty(example = "[\"node.hostname!=node3.corp.example.com\",\"node.role!=manager\",\"node.labels.type==production\"]", value = "An array of constraints.")
  public List<String> getConstraints() {
    return constraints;
  }

  public void setConstraints(List<String> constraints) {
    this.constraints = constraints;
  }

  public TaskSpecPlacement preferences(List<TaskSpecPlacementPreferences> preferences) {
    this.preferences = preferences;
    return this;
  }

  public TaskSpecPlacement addPreferencesItem(TaskSpecPlacementPreferences preferencesItem) {
    if (this.preferences == null) {
      this.preferences = new ArrayList<TaskSpecPlacementPreferences>();
    }
    this.preferences.add(preferencesItem);
    return this;
  }

   /**
   * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.
   * @return preferences
  **/
  @ApiModelProperty(example = "[{\"Spread\":{\"SpreadDescriptor\":\"node.labels.datacenter\"}},{\"Spread\":{\"SpreadDescriptor\":\"node.labels.rack\"}}]", value = "Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence.")
  public List<TaskSpecPlacementPreferences> getPreferences() {
    return preferences;
  }

  public void setPreferences(List<TaskSpecPlacementPreferences> preferences) {
    this.preferences = preferences;
  }

  public TaskSpecPlacement platforms(List<Platform> platforms) {
    this.platforms = platforms;
    return this;
  }

  public TaskSpecPlacement addPlatformsItem(Platform platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<Platform>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

   /**
   * Platforms stores all the platforms that the service&#39;s image can run on. This field is used in the platform filter for scheduling. If empty, then the platform filter is off, meaning there are no scheduling restrictions. 
   * @return platforms
  **/
  @ApiModelProperty(value = "Platforms stores all the platforms that the service's image can run on. This field is used in the platform filter for scheduling. If empty, then the platform filter is off, meaning there are no scheduling restrictions. ")
  public List<Platform> getPlatforms() {
    return platforms;
  }

  public void setPlatforms(List<Platform> platforms) {
    this.platforms = platforms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskSpecPlacement taskSpecPlacement = (TaskSpecPlacement) o;
    return Objects.equals(this.constraints, taskSpecPlacement.constraints) &&
        Objects.equals(this.preferences, taskSpecPlacement.preferences) &&
        Objects.equals(this.platforms, taskSpecPlacement.platforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraints, preferences, platforms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskSpecPlacement {\n");
    
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

